* Terminal
** term key
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd  "C-. t") 'term )
(defvar my-term-shell "/bin/zsh")
#+END_SRC
* Aesthetics
** startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(tool-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

#+END_SRC
** bullets_org_mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** easy_see
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))

(when window-system (global-hl-line-mode t))
(when window-system (global-prettify-symbols-mode t))

#+END_SRC
** indents
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)
(setq highlight-indent-guides-auto-odd-face-perc 15)
(setq highlight-indent-guides-auto-even-face-perc 15)
(setq highlight-indent-guides-auto-character-face-perc 20)
#+END_SRC
** line_numbers
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC
** doom_modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))
;; How tall the mode-line should be. It's only respected in GUI.
;; If the actual char height is larger, it respects the actual height.
(setq doom-modeline-height 25)

;; How wide the mode-line bar should be. It's only respected in GUI.
(setq doom-modeline-bar-width 3)

;; How to detect the project root.
;; The default priority of detection is `ffip' > `projectile' > `project'.
;; nil means to use `default-directory'.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
(setq doom-modeline-project-detection 'project)

;; Determines the style used by `doom-modeline-buffer-file-name'.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project => emacs/l/comint.el
;;   truncate-except-project => ~/P/F/emacs/l/comint.el
;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
;;   truncate-all => ~/P/F/e/l/comint.el
;;   relative-from-project => emacs/lisp/comint.el
;;   relative-to-project => lisp/comint.el
;;   file-name => comint.el
;;   buffer-name => comint.el<2> (uniquify buffer name)
;;
;; If you are expereicing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name' style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
(setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

;; Whether display icons in mode-line. It respects `all-the-icons-color-icons'.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon (display-graphic-p))

;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode'.
;; It respects `doom-modeline-major-mode-icon'.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
(setq doom-modeline-buffer-modification-icon t)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
(setq doom-modeline-unicode-fallback t)

;; Whether display minor modes in mode-line.
(setq doom-modeline-minor-modes (featurep 'minions))

;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count nil)

;; Whether display buffer encoding.
(setq doom-modeline-buffer-encoding t)

;; Whether display indentation information.
(setq doom-modeline-indent-info nil)

;; If non-nil, only display one number for checker information if applicable.
(setq doom-modeline-checker-simple-format t)

;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)

;; The maximum displayed length of the branch name of version control.
(setq doom-modeline-vcs-max-length 12)

;; Whether display perspective name. Non-nil to display in mode-line.
(setq doom-modeline-persp-name t)

;; Whether display `lsp' state. Non-nil to display in mode-line.
(setq doom-modeline-lsp t)

;; Whether display GitHub notifications. It requires `ghub` package.
(setq doom-modeline-github nil)

;; The interval of checking GitHub.
(setq doom-modeline-github-interval (* 30 60))

;; Whether display mu4e notifications. It requires `mu4e-alert' package.
(setq doom-modeline-mu4e t)

;; Whether display irc notifications. It requires `circe' package.
(setq doom-modeline-irc t)

;; Function to stylize the irc buffer names.
(setq doom-modeline-irc-stylize 'identity)

;; Whether display environment version.
(setq doom-modeline-env-version t)
;; Or for individual languages
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
(setq doom-modeline-env-ruby-executable "ruby")
(setq doom-modeline-env-perl-executable "perl")
(setq doom-modeline-env-go-executable "go")
(setq doom-modeline-env-elixir-executable "iex")
(setq doom-modeline-env-rust-executable "rustc")

;; What to dispaly as the version while a new one is being loaded
(setq doom-modeline-env-load-string "...")

;; Hooks that run before/after the modeline version string is updated
(setq doom-modeline-before-update-env-hook nil)
(setq doom-modeline-after-update-env-hook nil)
#+END_SRC
** aggressive_indent_mode
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'css-mode-hook #'aggressive-indent-mode)
#+END_SRC
* Easy_Peezey
** window navigation
   #+BEGIN_SRC emacs-lisp
     (use-package switch-window
       :ensure t
       :config
       (setq switch-window-input-style 'minibuffer)
       (setq switch-window-increase 8)
       (setq switch-window-threshold 2)
       (setq switch-window-shortcut-style 'qwerty) 
       (setq switch-window-qwerty-shortcuts
	     '("a" "s" "d" "f" "g" "h" "j"))
       :bind
       ([remap other-window] . switch-window))

     (global-set-key (kbd "s-o") (function switch-window))
   #+END_SRC
** searching
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    (ivy-mode)
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t
	  ivy-count-format "%d/%d "))

  (use-package swiper
    :ensure t
    :config
    (global-set-key (kbd "C-s") 'swiper))
#+END_SRC
** which_key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** yay_nay
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** brackets
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
				(?\( . ?\))
				(?\" . ?\")
				))

  (add-hook 'org-mode-hook 'electric-pair-mode)
  (add-hook 'emacs-lisp-mode-hook 'electric-pair-mode)
  (show-paren-mode)
#+END_SRC
** scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** backup_save
#+BEGIN_SRC emacs-lisp
(setq make-backupfile nil)
(setq auto-save-default nil)
#+END_SRC
** bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** config_visit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
      "Opens up the configuration file on the stroke of =C-c e=
  "
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") (function config-visit))
#+END_SRC
** keybinding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-3") (lambda () (interactive) (insert "#")))
#+END_SRC
** python_keybinding
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
	    (lambda ()
	      (define-key python-mode-map (kbd "C-. c") #'comment-or-uncomment-region)))
#+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-. c") 'comment-or-uncomment-region)
#+END_SRC
** free_keys
#+BEGIN_SRC emacs-lisp
(bind-key "C-h C-k" 'free-keys)
#+END_SRC
** dumb_jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("C-. o" . dumb-jump-go-other-window)
         ("C-. j" . dumb-jump-go)
         ("C-. b" . dumb-jump-back)
         ("C-. i" . dumb-jump-go-prompt)
         ("C-. x" . dumb-jump-go-prefer-external)
         ("C-. z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
  :ensure)
#+END_SRC
** config_visit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
      "Opens up the configuration file on the stroke of =C-c e=
  "
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") (function config-visit))
#+END_SRC
** auto_complete
#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC
** iedit
#+BEGIN_SRC emacs-lisp
(require 'iedit)
(use-package iedit
    :ensure t
    :config
    (global-set-key (kbd "C-:") (function iedit-mode)))
#+END_SRC
** yassnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
    :ensure t
    :init
    (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
    (add-hook 'LaTeX-mode-hook 'yas-minor-mode)
    (add-hook 'python-mode-hook 'yas-minor-mode)
    (add-hook 'org-mode-hook 'yas-minor-mode)
    (add-hook 'c++-mode-hook 'yas-minor-mode)
    (add-hook 'shell-mode-hook 'yas-minor-mode)
    (add-hook 'rust-mode-hook 'yas-minor-mode)
    (add-hook 'markdown-mode-hook 'yas-minor-mode)

    (use-package yasnippet-snippets ;the snippets file
      :ensure t)

    (yas-reload-all))
#+END_SRC
** Ibuffer
   #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("⍫ Magit" (or
                           (name . "^.*gitignore$")
                           (name . "^magit.*$")))
               ("⚙ Rust" (or
                           (mode . rust-mode)))
               ("ᛔ Jupyter" (or
                             (mode . "ein:notebooklist-mode")
                             (name . "\\*ein:.*")
                             ))
               ("ᛥ Dired" (mode . dired-mode))
               ("ᚧ Python" (or
                            (mode . python-mode)
                            (mode . inferior-python-mode)
                            (name . "^\\*Python Doc\\*$")
                            (name . "^matplotlibrc$")
                            (name . "^.*mplstyle$")
                            (name . "^\\*Flycheck error messages\\*$")))
               ("ᛋᛋ Latex" (or
                            (name . "^.*tex$")
                            (name . "^.*bib$")
                            (name . "^.*log$")
                            (name . "\\*RefTeX Select\\*")
                            (name . "^\\*toc\\*$")
                            (mode . comint-mode)))
               ("ᚸ Org" (name . "\\.org"))
               ("⚓ Shell" (name . "\\.sh"))
               ("෴ PDF" (name . "\\.pdf"))
               ("卍 Config" (name . "^\\..*$"))
               ("ᛓ Elfeed" (or
                            (name . "\\*elfeed.*\\*")
                            (name . "^ef.*$")))
               ))))

(defun kill-matching-buffers-no-ask ()
  (interactive)
  (cl-letf (((symbol-function 'kill-buffer-ask) #'kill-buffer))
    (call-interactively #'kill-matching-buffers)))

(global-set-key (kbd  "C-. k") 'kill-matching-buffers-no-ask )
   #+END_SRC
* IDO
** enable_mode
#+BEGIN_SRC emacs-lisp
  (setq idoenable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** enable_switch_buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC

* To_do_list
#+BEGIN_SRC emacs-lisp
  ;;set key for agenda
  (global-set-key (kbd "C-c a") 'org-agenda)

  (setq org-agenda-files (quote ("/Users/ivan/Google Drive/to_do.org")))

  ;;set priority range from A to C with default A
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)

  ;;set colours for priorities
  (setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
			     (?B . (:foreground "LightSteelBlue"))
			     (?C . (:foreground "OliveDrab"))))

  ;;keywords
  (setq org-todo-keywords '((sequence "TODO(t)" "IMPORTANT(i)" "URGENT(u)" "|" "DONE(d)" "CANCELLED(c)"))
        org-todo-keyword-faces
        '(("TODO" :foreground "#9f7efe" :weight normal :underline t)
          ("URGENT" :foreground "#ff6480" :weight normal :underline t)
          ("IMPORTANT" :foreground "#0098dd" :weight normal :underline t)
          ("DONE" :foreground "#50a14f" :weight normal :underline t)
          ("CANCELLED" :foreground "#7c7c75" :weight normal :underline t)))

  ;;open agenda in current window
  (setq org-agenda-window-setup (quote current-window))
#+END_SRC

* Projectile
(define-key projectile-mode-map (kbd "s-,") 'projectile-command-map)
* Magit
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
   :if (memq window-system '(mac ns))
   :ensure t
   :config
   (exec-path-from-shell-initialize))
#+END_SRC
