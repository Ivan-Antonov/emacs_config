* Terminal
** Fish_term_key
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd  "<C-return>") 'term )
#+END_SRC

* Aesthetics
** Bullets_Org_mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Easy_see
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))

(when window-system (global-hl-line-mode t))
(when window-system (global-prettify-symbols-mode t))

#+END_SRC
** Startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)

(tool-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

#+END_SRC
* Easy_Peezey
** Which_key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** Yay_Nay
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Brackets
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
				(?\( . ?\))
				(?\" . ?\")
				))

  (add-hook 'org-mode-hook 'electric-pair-mode)
  (add-hook 'emacs-lisp-mode-hook 'electric-pair-mode)
  (show-paren-mode)
#+END_SRC
** Scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Backup_Save
#+BEGIN_SRC emacs-lisp
(setq make-backupfile nil)
(setq auto-save-default nil)
#+END_SRC
** Bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** Keybinding
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-3") (lambda () (interactive) (insert "#")))
#+END_SRC
* IDO
** Enable_mode
#+BEGIN_SRC emacs-lisp
  (setq idoenable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** Vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Enable_switch_buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC

* Yassnippet
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
		"~/.emacs.d/plugins/yasnippet")
  (require 'yasnippet)
  (yas-global-mode 1)
  (global-set-key (kbd "M-z") 'tab-indent-or-complete)
#+END_SRC
* Doom_modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))
;; How tall the mode-line should be. It's only respected in GUI.
;; If the actual char height is larger, it respects the actual height.
(setq doom-modeline-height 25)

;; How wide the mode-line bar should be. It's only respected in GUI.
(setq doom-modeline-bar-width 3)

;; How to detect the project root.
;; The default priority of detection is `ffip' > `projectile' > `project'.
;; nil means to use `default-directory'.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
(setq doom-modeline-project-detection 'project)

;; Determines the style used by `doom-modeline-buffer-file-name'.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project => emacs/l/comint.el
;;   truncate-except-project => ~/P/F/emacs/l/comint.el
;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
;;   truncate-all => ~/P/F/e/l/comint.el
;;   relative-from-project => emacs/lisp/comint.el
;;   relative-to-project => lisp/comint.el
;;   file-name => comint.el
;;   buffer-name => comint.el<2> (uniquify buffer name)
;;
;; If you are expereicing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name' style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
(setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

;; Whether display icons in mode-line. It respects `all-the-icons-color-icons'.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon (display-graphic-p))

;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode'.
;; It respects `doom-modeline-major-mode-icon'.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
(setq doom-modeline-buffer-modification-icon t)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
(setq doom-modeline-unicode-fallback t)

;; Whether display minor modes in mode-line.
(setq doom-modeline-minor-modes (featurep 'minions))

;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count nil)

;; Whether display buffer encoding.
(setq doom-modeline-buffer-encoding t)

;; Whether display indentation information.
(setq doom-modeline-indent-info nil)

;; If non-nil, only display one number for checker information if applicable.
(setq doom-modeline-checker-simple-format t)

;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)

;; The maximum displayed length of the branch name of version control.
(setq doom-modeline-vcs-max-length 12)

;; Whether display perspective name. Non-nil to display in mode-line.
(setq doom-modeline-persp-name t)

;; Whether display `lsp' state. Non-nil to display in mode-line.
(setq doom-modeline-lsp t)

;; Whether display GitHub notifications. It requires `ghub` package.
(setq doom-modeline-github nil)

;; The interval of checking GitHub.
(setq doom-modeline-github-interval (* 30 60))

;; Whether display mu4e notifications. It requires `mu4e-alert' package.
(setq doom-modeline-mu4e t)

;; Whether display irc notifications. It requires `circe' package.
(setq doom-modeline-irc t)

;; Function to stylize the irc buffer names.
(setq doom-modeline-irc-stylize 'identity)

;; Whether display environment version.
(setq doom-modeline-env-version t)
;; Or for individual languages
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
(setq doom-modeline-env-ruby-executable "ruby")
(setq doom-modeline-env-perl-executable "perl")
(setq doom-modeline-env-go-executable "go")
(setq doom-modeline-env-elixir-executable "iex")
(setq doom-modeline-env-rust-executable "rustc")

;; What to dispaly as the version while a new one is being loaded
(setq doom-modeline-env-load-string "...")

;; Hooks that run before/after the modeline version string is updated
(setq doom-modeline-before-update-env-hook nil)
(setq doom-modeline-after-update-env-hook nil)

#+END_SRC
* Config_visit
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
      "Opens up the configuration file on the stroke of =C-c e=
  "
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") (function config-visit))
#+END_SRC
